openapi: 3.0.3
info:
  title: Trip Planner API
  version: 1.0.0
  description: >
    Endpoints and DTOs for creating itineraries, recommending places,
    managing an interest list, and producing a day-by-day plan.
servers:
  - url: https://api.example.com/v1
    description: Production
  - url: http://localhost:8080/v1
    description: Local dev
security:
  - bearerAuth: []

paths:
  /itineraries:
    get:
      summary: Get all itineraries for the current user
      operationId: getUserItineraries
      tags: [Itineraries]
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
      responses:
        '200':
          description: List of user's itineraries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItinerariesListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create a new itinerary (async)
      description: |
        Creates a new itinerary and triggers asynchronous AI-powered POI generation.
        Returns immediately with itinerary ID. Poll GET /itineraries/{id} to check
        generation status via aiMetadata.generation_pending field.
      operationId: createItinerary
      tags: [Itineraries]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItineraryRequest'
      responses:
        '202':
          description: |
            Accepted - Itinerary created, AI generation started in background.
            Check aiMetadata.generation_pending to track progress.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateItineraryResponse'

  /itineraries/{itineraryId}:
    get:
      summary: Get itinerary details by ID
      description: |
        Retrieves complete itinerary details including places and AI generation status.
        Check aiMetadata.generation_pending to see if POI generation is complete.
      operationId: getItineraryById
      tags: [Itineraries]
      parameters:
        - $ref: '#/components/parameters/ItineraryId'
      responses:
        '200':
          description: Itinerary details with places and generation status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItineraryDetailResponse'
        '403':
          description: Forbidden - User does not own this itinerary
        '404':
          description: Itinerary not found

  /itineraries/{itineraryId}/recommendations:
    get:
      summary: Get recommended places for an itinerary
      operationId: getRecommendations
      tags: [Recommendations]
      parameters:
        - $ref: '#/components/parameters/ItineraryId'
        - name: query
          in: query
          description: Full-text keyword to apply to place name/description.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /itineraries/interests:
    post:
      summary: Add a place to the itinerary's interest list
      operationId: addInterest
      tags: [Interests]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddInterestRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddInterestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /itineraries/{itineraryId}/plan:
    post:
      summary: Produce a day-by-day plan from interest list and constraints
      operationId: planItinerary
      tags: [Planning]
      parameters:
        - $ref: '#/components/parameters/ItineraryId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanItineraryRequest'
      responses:
        '200':
          description: Planned route per day
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanItineraryResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Firebase ID token supplied as Authorization: Bearer <token>."

  parameters:
    ItineraryId:
      name: itineraryId
      in: path
      required: true
      description: UUID of the itinerary
      schema:
        type: string
        format: uuid
    Page:
      name: page
      in: query
      required: false
      description: Zero-based page index
      schema:
        type: integer
        minimum: 0
        default: 0
    Size:
      name: size
      in: query
      required: false
      description: Page size
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20

  responses:
    BadRequest:
      description: The request was invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Authentication required or invalid token.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ServerError:
      description: An unexpected error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    # Shared primitives
    PageMeta:
      type: object
      properties:
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 20
        totalElements:
          type: integer
          format: int64
          example: 143
        totalPages:
          type: integer
          example: 8
      required: [page, size, totalElements, totalPages]

    ApiError:
      type: object
      properties:
        code:
          type: string
          example: PLACE_CLOSED
        message:
          type: string
        details:
          type: object
          additionalProperties: true
      required: [code, message]

    ErrorResponse:
      type: object
      properties:
        traceId:
          type: string
          example: a1b2c3
        error:
          $ref: '#/components/schemas/ApiError'
      required: [traceId, error]

    TravelMode:
      type: string
      enum: [DRIVING, TRANSIT, WALKING, BICYCLING]

    TravelPace:
      type: string
      enum: [RELAXED, MODERATE, PACKED]
      description: |
        Travel pace preference:
        - RELAXED: 2-3 POI/day
        - MODERATE: 4-5 POI/day
        - PACKED: 6+ POI/day

    ActivityIntensity:
      type: string
      enum: [LIGHT, MODERATE, INTENSE]
      description: |
        Physical activity intensity:
        - LIGHT: minimal walking
        - MODERATE: standard walking/touring
        - INTENSE: hiking/sports

    AttractionCategory:
      type: string
      enum: [MUSEUM, NATURE, FOOD, CULTURE, SHOPPING, ADVENTURE, NIGHTLIFE, HISTORICAL, ENTERTAINMENT, SPORTS, ART]

    OpeningHoursDTO:
      type: object
      properties:
        raw:
          type: string
          description: Original hours text (e.g., from Google).
        normalized:
          type: array
          items:
            $ref: '#/components/schemas/DailyHours'
      required: [raw]
    DailyHours:
      type: object
      properties:
        weekday:
          type: string
          example: MONDAY
        times:
          type: array
          items:
            $ref: '#/components/schemas/TimeRange'
      required: [weekday, times]
    TimeRange:
      type: object
      properties:
        startLocal: { type: string, example: "10:00" }
        endLocal: { type: string, example: "18:00" }
      required: [startLocal, endLocal]

    GeoPoint:
      type: object
      properties:
        lat: { type: number, format: double }
        lng: { type: number, format: double }
      required: [lat, lng]

    ContactDTO:
      type: object
      properties:
        website: { type: string, format: uri, nullable: true }
        phone: { type: string, nullable: true }

    PlaceDTO:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        location: { $ref: '#/components/schemas/GeoPoint' }
        address: { type: string }
        contact: { $ref: '#/components/schemas/ContactDTO' }
        imageUrl: { type: string, format: uri, nullable: true }
        description: { type: string, nullable: true }
        openingHours: { $ref: '#/components/schemas/OpeningHoursDTO' }
        itineraryPlaceId: { type: integer }
        pinned: { type: boolean, nullable: true }
        note: { type: string, nullable: true }
        addedAt: { type: string, format: date-time, nullable: true }
      required: [id, name, location, address]

    # 1) Create Itinerary
    CreateItineraryRequest:
      type: object
      properties:
        destinationCity:
          type: string
          description: Destination city for the trip
          example: "Tokyo"
        startDate:
          type: string
          format: date-time
          description: ISO 8601 datetime with timezone offset (required for specific start times)
          example: "2025-10-01T15:00:00+08:00"
        endDate:
          type: string
          format: date-time
          description: ISO 8601 datetime with timezone offset
          example: "2025-10-05T20:00:00+08:00"
        travelMode:
          $ref: '#/components/schemas/TravelMode'
        budgetLimitCents:
          type: integer
          format: int32
          description: Budget limit in cents (USD)
          example: 300000
        travelPace:
          $ref: '#/components/schemas/TravelPace'
        activityIntensity:
          $ref: '#/components/schemas/ActivityIntensity'
        preferredCategories:
          type: array
          items:
            $ref: '#/components/schemas/AttractionCategory'
          description: Preferred attraction categories
          example: ["CULTURE", "FOOD", "ENTERTAINMENT", "ART"]
        numberOfTravelers:
          type: integer
          format: int32
          description: Total number of travelers
          example: 2
        hasChildren:
          type: boolean
          description: Whether the group includes children
          example: false
        hasElderly:
          type: boolean
          description: Whether the group includes elderly travelers
          example: false
        preferPopularAttractions:
          type: boolean
          description: Whether to prefer popular/touristy attractions
          example: false
        additionalPreferences:
          type: string
          description: Free-text additional preferences or constraints
          example: "Interested in anime culture and traditional tea ceremonies"
      required: [destinationCity, startDate, endDate, budgetLimitCents, travelPace]
    CreateItineraryResponse:
      type: object
      properties:
        itineraryId:
          type: string
          format: uuid
          description: Unique identifier for the created itinerary
        destinationCity:
          type: string
          example: "Paris"
        startDate:
          type: string
          format: date-time
          example: "2024-06-01T09:00:00+02:00"
        endDate:
          type: string
          format: date-time
          example: "2024-06-07T18:00:00+02:00"
        travelMode:
          $ref: '#/components/schemas/TravelMode'
        budgetLimitCents:
          type: integer
          example: 200000
      required: [itineraryId, destinationCity, startDate, endDate, budgetLimitCents]

    ItineraryDetailResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        destinationCity:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        travelMode:
          $ref: '#/components/schemas/TravelMode'
        budgetLimitCents:
          type: integer
        travelPace:
          $ref: '#/components/schemas/TravelPace'
        activityIntensity:
          $ref: '#/components/schemas/ActivityIntensity'
        numberOfTravelers:
          type: integer
        hasChildren:
          type: boolean
        hasElderly:
          type: boolean
        preferPopularAttractions:
          type: boolean
        preferredCategories:
          type: array
          items:
            $ref: '#/components/schemas/AttractionCategory'
        additionalPreferences:
          type: string
        places:
          type: array
          items:
            $ref: '#/components/schemas/PlaceDTO'
        seededRecommendations:
          type: object
          additionalProperties: true
        aiMetadata:
          type: object
          description: |
            AI generation metadata including status.
            - generation_pending (boolean): true if POI generation in progress
            - generated_places_count (integer): number of places generated
            - generation_error (string): error message if generation failed
          additionalProperties: true
          example:
            generation_pending: false
            generated_places_count: 15
            staying_days: 6
            recommended_poi_count: 15
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # 2) Get Recommended Places
    RecommendationsResponse:
      type: object
      properties:
        itineraryId: { type: string, format: uuid }
        items:
          type: array
          items:
            $ref: '#/components/schemas/PlaceDTO'
        page:
          $ref: '#/components/schemas/PageMeta'
      required: [itineraryId, items, page]

    # 3) Add to interest list
    AddInterestRequest:
      type: object
      properties:
        Itinerary_placeId: { type: string }
        pinned:
          type: boolean
          description: Whether to mark the place as pinned/favorite.
          default: false
      required: [placeId]
    AddInterestResponse:
      type: object
      properties:
        place: { $ref: '#/components/schemas/PlaceDTO' }
        pinned: { type: boolean }
      required: [place, pinned]

    # 4) Plan itinerary
    PlanItineraryRequest:
      type: object
      properties:
        interestPlaceIds:
          type: array
          items: { type: string }
          description: If omitted or empty, use all current interests.
        startDate:
          type: string
          format: date-time
          description: Optional override for itinerary start (ISO 8601 datetime with timezone)
          example: "2025-10-01T15:00:00+08:00"
        endDate:
          type: string
          format: date-time
          description: Optional override for itinerary end (ISO 8601 datetime with timezone)
          example: "2025-10-05T20:00:00+08:00"
        travelMode: { $ref: '#/components/schemas/TravelMode' }
        dailyStart: { type: string, example: "09:00" }
        dailyEnd: { type: string, example: "20:00" }
        avoidCrowds: { type: boolean, default: false }
        minimizeTransfers: { type: boolean, default: false }
        balanceCategories: { type: boolean, default: true }
    PlanItineraryResponse:
      type: object
      properties:
        itineraryId: { type: string, format: uuid }
        days:
          type: array
          items:
            $ref: '#/components/schemas/PlannedDay'
        warnings:
          type: array
          description: Non-fatal issues (e.g., place closed for a selected day).
          items:
            $ref: '#/components/schemas/ApiError'
      required: [itineraryId, days]
    PlannedDay:
      type: object
      properties:
        date: { type: string, example: "2025-10-02" }
        stops:
          type: array
          items:
            $ref: '#/components/schemas/PlannedStop'
      required: [date, stops]
    PlannedStop:
      type: object
      properties:
        order: { type: integer, example: 1 }
        place: { type: string, example: "Atlanta fox news"}
        arrivalLocal: { type: string, example: "10:15" }
        departLocal: { type: string, example: "11:30" }
        stayMinutes: { type: integer, example: 75 }
        note: { type: string, nullable: true }
      required: [order, place, arrivalLocal, departLocal, stayMinutes]

    # Summaries
    ItinerariesListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItinerarySummaryDTO'
        page:
          $ref: '#/components/schemas/PageMeta'
      required: [items, page]

    ItinerarySummaryDTO:
      type: object
      properties:
        id: { type: string, format: uuid }
        destinationCity: { type: string }
        startDate: { type: string, format: date-time }
        endDate: { type: string, format: date-time }
        travelMode: { $ref: '#/components/schemas/TravelMode' }
      required: [id, destinationCity, startDate, endDate, travelMode]
